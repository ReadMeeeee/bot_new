MENU_SECTIONS = {
    "base": {
        "title": "–û—Å–Ω–æ–≤–Ω—ã–µ",
        "items": [
            ("/start", "start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            ("/about", "about", "–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"),
            ("/help",  "help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"),
        ],
    },
    "group": {
        "title": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π",
        "items": [
            ("/create_group", "create_group", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É"),
            ("/change_group", "change_group", "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≥—Ä—É–ø–ø—ã"),
            ("/add_student",  "add_student",  "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É"),
            ("/rm_student",   "rm_student",   "–£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã"),
            ("/cd_leader",    "cd_leader",    "–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ç–∞—Ä–æ—Å—Ç—É –≥—Ä—É–ø–ø—ã"),
        ],
    },
    "requests": {
        "title": "–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
        "items": [
            ("/get_schedule", "get_schedule", "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
            ("/get_events",   "get_events",   "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π"),
            ("/get_news",     "get_news",     "–í—ã–≤–µ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"),
            ("/get_hw",       "get_hw",       "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –î–ó"),

            ("/add_events",   "add_events",   "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ"),
            ("/add_hw",       "add_hw",       "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"),
        ],
    },
    "ai": {
        "title": "ü§ñ –ó–∞–ø—Ä–æ—Å –∫ –ò–ò",
        "items": [
            ("/bot", "bot", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"),
        ],
    },
}


from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder


def make_keyboard(
    prefix: str,
    section: str,
    include_back: bool = True,
    in_row: int = 2,
) -> InlineKeyboardMarkup:
    """
    –§–∞–±—Ä–∏–∫–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã builder–æ–º –ø–æ —Ä–∞–∑–º–µ—Ç–∫–µ config

    :param prefix: –ü—Ä–µ—Ñ–∏–∫—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã - –º–µ–Ω—é: "menu" –∏–ª–∏ "help"
    :param section: –ö–ª—é—á –ø–æ–¥–º–µ–Ω—é: "base", "group", "requests", "ai"
    :param include_back: –í–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    :param in_row: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É

    :return: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    # –ï—Å–ª–∏ –≥–ª–∞–≤–Ω–∞—è ‚Äî –∫–Ω–æ–ø–∫–∏ –ø–æ —Å–µ–∫—Ü–∏—è–º
    if section == "main":
        for sec_key, sec_data in MENU_SECTIONS.items():
            builder.button(
                text=sec_data["title"],
                callback_data=f"{prefix}:{sec_key}",
            )
    else:
        # –î–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –±–µ—Ä—ë–º items –∏–∑ –Ω—É–∂–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        section_data = MENU_SECTIONS[section]
        for text, key, _desc in section_data["items"]:
            builder.button(
                text=text,
                callback_data=f"{prefix}:{section}:{key}",
            )

    if include_back:
        if prefix == "help" and section == "main":
            builder.button(
                text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="menu:main"
            )
        else:
            builder.button(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data=f"{prefix}:main"
            )

    builder.adjust(in_row)
    return builder.as_markup()
