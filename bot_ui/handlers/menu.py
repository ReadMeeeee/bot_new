from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from bot_ui.keyboards.keyboards import (
    start_main,
    start_main_base,
    start_main_group,
    start_main_requests,
    start_main_ai,
    help_main,
    help_main_base,
    help_main_group,
    help_main_requests,
    help_main_ai,
)
from bot_ui.keyboards.keyboards_config import MENU_SECTIONS


menu_router = Router()


class MenuStates(StatesGroup):
    waiting_for_input = State()


# region –ú–µ–Ω—é start
@menu_router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é:", reply_markup=start_main)


@menu_router.callback_query(lambda c: c.data and c.data.startswith("menu:"))
async def process_menu(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    _, section, *rest = callback.data.split(":")

    # –ø–µ—Ä–µ—Ö–æ–¥ –≤ help –∏–∑ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    if section == "base" and rest and rest[0] == "help":
        await callback.message.edit_text(
            "–°–ø—Ä–∞–≤–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=help_main
        )
        return

    menu_map: dict[str, tuple[str, types.InlineKeyboardMarkup]] = {
        "main":     ("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é:",    start_main),
        "base":     ("–ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:",         start_main_base),
        "group":    ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π:",      start_main_group),
        "requests": ("–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:",       start_main_requests),
        "ai":       ("–ó–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –ò–ò:",        start_main_ai)
    }

    if section not in menu_map:
        return

    text, kb = menu_map[section]
    if rest:
        text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {rest[0]}"
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSMContext –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞
        await state.update_data(chosen=rest[0])
        await state.set_state(MenuStates.waiting_for_input)

    await callback.message.edit_text(text, reply_markup=kb)


@menu_router.message(MenuStates.waiting_for_input)
async def handle_menu_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    chosen = data.get("chosen")
    await message.answer(
        f"–î–ª—è –ø—É–Ω–∫—Ç–∞ ¬´{chosen}¬ª –≤—ã –≤–≤–µ–ª–∏:\n\n{message.text}"
    )
    await state.clear()
# endregion


# region –ú–µ–Ω—é help
@menu_router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer("–°–ø—Ä–∞–≤–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=help_main)


@menu_router.callback_query(lambda c: c.data and c.data.startswith("help:"))
async def process_help(callback: types.CallbackQuery):
    await callback.answer()

    _, section, *rest = callback.data.split(":")

    if rest:
        key = rest[0]
        desc = next(
            (d for (_t, k, d) in MENU_SECTIONS[section]["items"] if k == key),
            "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        )
        detail_kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [ types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"help:{section}") ]
        ])
        await callback.message.edit_text(desc, reply_markup=detail_kb)
        return

    # –≤—ã–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–ª–∏ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–º–æ—â–∏
    if section == "main":
        title, kb = "–°–ø—Ä–∞–≤–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", help_main
    else:
        title = f"–°–ø—Ä–∞–≤–∫–∞ –ø–æ ¬´{MENU_SECTIONS[section]['title']}¬ª:"
        kb_map = {
            "base":    help_main_base,
            "group":   help_main_group,
            "requests":help_main_requests,
            "ai":      help_main_ai
        }
        kb = kb_map[section]

    await callback.message.edit_text(title, reply_markup=kb)
# endregion
